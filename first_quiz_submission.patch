diff --git a/.gitignore b/.gitignore
index 3b47800..a619f62 100644
--- a/.gitignore
+++ b/.gitignore
@@ -193,4 +193,4 @@ cython_debug/
 
 # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
 hs_err_pid*
-replay_pid*
+replay_pid*
\ No newline at end of file
diff --git a/README.md b/README.md
index 7e4d662..26150d6 100644
--- a/README.md
+++ b/README.md
@@ -79,4 +79,4 @@ While you are free to use this repository to practice your engineering skills, o
 You will need a gmail account in order to use our submission form. Please make a free account (which will surely be useful in the future as well!) in order to enter your submission.
 
 
-_If there are questions not addressed here about the class, please put your questions into the `#etapa1-test` channel in Slack_
+_If there are questions not addressed here about the class, please put your questions into the `#etapa1-test` channel in Slack_
\ No newline at end of file
diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..04e55cc 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -13,23 +13,24 @@
 # need to be fixed. The test suite in `question1_test.py` will verify the output.
 # Read the test suite to know the values that these functions should return.
 
+city_info = {
+    "Quito": {"temperature": 22, "weather": "sunny"},
+    "Sao Paulo": {"temperature": 17, "weather": "cloudy"},
+    "San Francisco": {"temperature": 16, "weather": None},
+    "New York": {"temperature": 14, "weather": "rainy"},
+}
+
+
 def get_city_temperature(city):
-   if city == "Quito":
-      return 22
-   if city == "Sao Paulo":
-      return 17
-   if city == "San Francisco":
-      return 16
+   return city_info.get(city, {}).get("temperature")
+
+
 
 def get_city_weather(city):
+   sky_condition = city_info.get(city, {}).get("weather")
 
-  sky_condition = None
 
-  if city == "Sao Paulo":
-     sky_condition = "cloudy"
-  elif city == "New York":
-     sky_condition = "rainy"
+   temperature = get_city_temperature(city)
 
-  temperature = get_city_temperature(city)
 
-  return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
+   return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..55fe3fd 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,7 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+swapper = lambda x: (x[1], x[0])
 
 def run_swapper(list_of_tuples):
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..c89a4b7 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -25,20 +25,48 @@
 # The `alchemy_combine()` function will use your oven. You can see the expected 
 # formulas and their outputs in the test file, `question3_test.py`.
 
+class Oven:
+    def __init__(self):
+        self.ingredients = []
+        self.temperature = None
+
+    def add(self, item):
+        self.ingredients.append(item)
+
+    def freeze(self):
+        self.temperature = 'frozen'
+
+    def boil(self):
+        self.temperature = 'boiled'
+
+    def wait(self):
+        self.temperature = 'normal'
+
+    def get_output(self):
+        output_map = {
+            ('boiled', frozenset(["lead", "mercury"])): "gold",
+            ('frozen', frozenset(["water", "air"])): "snow",
+            ('boiled', frozenset(["cheese", "dough", "tomato"])): "pizza",
+        }
+
+        # Obtenemos el resultado del mapeo, si existe
+        return output_map.get((self.temperature, frozenset(self.ingredients)))
+
+
 # This function should return an oven instance!
 def make_oven():
-  None
+    return Oven()
+
 
 def alchemy_combine(oven, ingredients, temperature):
-  
-  for item in ingredients:
-    oven.add(item)
-
-  if temperature < 0:
-    oven.freeze()
-  elif temperature >= 100:
-    oven.boil()
-  else:
-    oven.wait()
-
-  return oven.get_output()
\ No newline at end of file
+    for item in ingredients:
+        oven.add(item)
+
+    if temperature < 0:
+        oven.freeze()
+    elif temperature >= 100:
+        oven.boil()
+    else:
+        oven.wait()
+
+    return oven.get_output()
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..0dee4e2 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import make_oven, alchemy_combine
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..515663f 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -24,7 +24,10 @@ import pets_db
 
 sql_pets_owned_by_nobody = """
 
-Your SQL here.
+SELECT a.name, a.species, a.age
+FROM animals a
+LEFT JOIN people_animals pa ON a.animal_id = pa.pet_id
+WHERE pa.owner_id IS NULL;
 
 """
 
@@ -34,7 +37,11 @@ Your SQL here.
 
 sql_pets_older_than_owner = """
 
-Your SQL here.
+SELECT COUNT(*)
+FROM animals a
+JOIN people_animals pa ON a.animal_id = pa.pet_id
+JOIN people p ON pa.owner_id = p.person_id
+WHERE a.age > p.age;
 
 """
 
@@ -43,6 +50,16 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+SELECT p.name, a.name, a.species
+FROM people p
+JOIN people_animals pa ON p.person_id = pa.owner_id
+JOIN animals a ON pa.pet_id = a.animal_id
+WHERE p.name = 'bessie' 
+  AND NOT EXISTS (
+    SELECT 1
+    FROM people_animals pa2
+    WHERE pa2.pet_id = pa.pet_id
+      AND pa2.owner_id != p.person_id
+  );
 
 """
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..675f71e 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+CREATE TABLE favorite_foods (
+  food_id integer,
+  name text,
+  vegetarian integer
+);
 
 """
 
@@ -30,7 +34,8 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals ADD COLUMN favorite_food_id integer;
+ALTER TABLE people ADD COLUMN favorite_food_id integer;
 
 """
 
@@ -40,6 +45,9 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT a.name, f.name
+FROM animals a
+JOIN favorite_foods f ON a.favorite_food_id = f.food_id
+WHERE f.vegetarian = 1;
 
 """
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
index 61c1fdd..0bf0054 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
@@ -4,4 +4,6 @@ public interface Drink {
   public String getName();
 
   public boolean isFizzy();
+
+  public int getCost();
 }
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..fbbf2da 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,49 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+import java.util.HashMap;
+import java.util.Map;
+
+import org.velezreyes.quiz.question6.drinks.*;
+
+public class VendingMachineImpl implements VendingMachine {
+
+  private Map<String, Class<? extends Drink>> availableDrinks = new HashMap<>();
+  private int userBalance = 0;
 
   public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+    return new VendingMachineImpl();
+  }
+
+  public VendingMachineImpl() {
+    availableDrinks.put("ScottCola", ScottCola.class);
+    availableDrinks.put("KarenTea", KarenTea.class);
+  }
+
+  @Override
+  public void insertQuarter() {
+    userBalance += 25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    Class<? extends Drink> drinkClass = availableDrinks.get(name);
+
+    if (drinkClass == null) {
+      throw new UnknownDrinkException();
+    }
+
+    Drink drink;
+    try {
+      drink = drinkClass.newInstance();
+    } catch (InstantiationException | IllegalAccessException e) {
+      throw new UnknownDrinkException();
+    }
+
+    if (userBalance < drink.getCost()) {
+      throw new NotEnoughMoneyException();
+    }
+
+    userBalance -= drink.getCost(); 
+    return drink;
   }
 }
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/drinks/KarenTea.java b/part2/src/main/java/org/velezreyes/quiz/question6/drinks/KarenTea.java
new file mode 100644
index 0000000..6bd02d3
--- /dev/null
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/drinks/KarenTea.java
@@ -0,0 +1,20 @@
+package org.velezreyes.quiz.question6.drinks;
+
+import org.velezreyes.quiz.question6.Drink;
+
+public class KarenTea implements Drink{
+    @Override
+    public int getCost() {
+        return 100;
+    }
+
+    @Override
+    public String getName() {
+        return "KarenTea";
+    }
+
+    @Override
+    public boolean isFizzy() {
+        return false;
+    }
+}
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/drinks/ScottCola.java b/part2/src/main/java/org/velezreyes/quiz/question6/drinks/ScottCola.java
new file mode 100644
index 0000000..01e5259
--- /dev/null
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/drinks/ScottCola.java
@@ -0,0 +1,22 @@
+package org.velezreyes.quiz.question6.drinks;
+
+import org.velezreyes.quiz.question6.Drink;
+
+public class ScottCola implements Drink{
+
+    @Override
+    public int getCost() {
+        return 75;
+    }
+
+    @Override
+    public String getName() {
+        return "ScottCola";
+    }
+
+    @Override
+    public boolean isFizzy() {
+        return true;
+    }
+    
+}
diff --git a/part3/README.md b/part3/README.md
index fd78ff7..f2b3f79 100644
--- a/part3/README.md
+++ b/part3/README.md
@@ -36,7 +36,7 @@ Here are some tips!
 - You can do this using any platform: draw the solution on a piece of paper and upload a picture of it, Google Drawings, a free Miro board, or any other virtual whiteboard method.
 
 
-_The final submission must be a photo file and should NOT be saved in this repository. Please make sure to keep it separate and then upload it in the submission form._
+_The final submission must be a photo file and should NOT be saved in this repository. Please make sure to keep it separate and then upload it in the submission form._   
 
 ## System Security
 
diff --git a/part3/security_question.md b/part3/security_question.md
new file mode 100644
index 0000000..816e2ac
--- /dev/null
+++ b/part3/security_question.md
@@ -0,0 +1,81 @@
+As the leader of the Engineering team of an tech startup that installs solar panels through an app, our main focus is to ensure the security of our technological infrastructure. We have drawn inspiration from the OWASP Top 10 security model of 2021 to assess potential security issues that could impact our system. Our infrastructure is based on Kubernetes containers hosted on Amazon Web Services and comprises several key components. These include a mobile app for Android and iOS, a web frontend developed in Javascript with Next.js, and a MySQL database that stores customer information. A Python backend implemented with FastAPI communicates with both the web frontend and mobile apps.
+
+Furthermore, it's important to note that we have 12 software engineering employees with full system access, 3 customer support employees with permissions to view customer information and make changes to orders and accounts, and one sales employee.
+
+Therefore, the actions I would take would be as follows:
+
+1. **Mobile Application for Android and iOS (A07:2021-Identification and Authentication Failures)**:
+
+   - **Secure Authentication and Authorization**:
+     - Implement a robust authentication and authorization system to ensure that only authorized users have access to appropriate functions and data.
+     - Use two-factor authentication (2FA) where possible to enhance the security of user accounts.
+
+   - **Secure Data Storage on Mobile Devices (A08:2021-Software and Data Integrity Failures)**:
+     - Encrypt data stored on mobile devices to prevent unauthorized access in case of loss or theft.
+
+   - **Protection Against Reverse Engineering and Code Obfuscation (A08:2021-Software and Data Integrity Failures)**:
+     - Implement measures to protect the mobile application code against reverse engineering and the extraction of sensitive information.
+
+   - **SSL Pinning (A08:2021-Software and Data Integrity Failures)**:
+    - Implement SSL pinning to ensure that connections between the mobile application and servers are made only with trusted certificates. This reduces the risk of man-in-the-middle attacks and ensures secure and reliable communication.
+
+2. **Web Frontend (Next.js) (A05:2021-Incorrect Security Configuration)**:
+
+   - **Web Application Security (A03:2021-Injection)**:
+     - Implement security controls in the web application to protect it against common attacks such as code injection and XSS attacks.
+     - Regularly verify that the libraries and components used are up to date and free from known vulnerabilities. Keeping dependencies up to date is essential to avoid security risks.
+
+   - **Input Validation and Output Escaping (A03:2021-Injection)**:
+     - Properly validate and escape all input and output data to prevent injection and XSS attacks.
+
+3. **MySQL Database (A04:2021-Insecure Design)**:
+
+   - **Database Security (A01:2021-Access Control Loss)**:
+     - Apply database security policies, such as strong authentication, role-based access, and database auditing to control access and track activities.
+
+   - **Secure Password Storage (A02:2021-Cryptographic Failure)**:
+     - Use secure hash algorithms and salting functions to store customer passwords securely.
+
+   - **Sensitive Data Encryption (A02:2021-Cryptographic Failure)**:
+     - Consider encrypting sensitive data, such as home addresses and phone numbers, in the database, depending on specific security and compliance requirements. The encryption of this data may be optional and will depend on risk assessment and organization security policies.
+
+4. **Python Backend with FastAPI (A07:2021-Identification and Authentication Failures)**:
+
+   - **API Security**:
+     - Implement strong authentication and authorization to control access to the APIs.
+     - Use JSON Web Tokens (JWT) for API authentication and authorization.
+     - Regularly verify that the libraries and components used are up to date and free from known vulnerabilities. Keeping dependencies up to date is essential to avoid security risks.
+
+   - **Input Data Validation (A03:2021-Injection)**:
+     - Carefully validate and filter input data to prevent injection attacks, such as SQL injection and command attacks.
+
+   - **DDoS Protection (A08:2021-Software and Data Integrity Failures)**:
+     - Implement measures to mitigate distributed denial of service (DDoS) attacks in your backend.
+
+   - **Protection Against Brute Force Attacks (A01:2021-Access Control Loss)**:
+     - Implement protection measures against brute force attacks, such as the implementation of CAPTCHAs or logical challenges in exposed interfaces to mitigate unauthorized access attempts.
+
+5. **Employees and System Access (A01:2021-Access Control Loss)**:
+
+   - **Employee Access Management (A09:2021-Registration and Monitoring Failures)**:
+     - Implement an access management system that allows granting employees the minimum necessary permissions based on their responsibilities.
+
+   - **Security Training (A09:2021-Registration and Monitoring Failures)**:
+     - Provide security training to employees so they are aware of best practices and security risks.
+
+6. **Audit and Activity Logging (A07:2021-Identification and Authentication Failures)**:
+
+   - Implement an activity logging system that allows tracking who accesses what data and what actions are taken in the system. This is crucial for detecting and responding to potential security breaches.
+
+7. **Monitoring and Incident Response (A07:2021-Identification and Authentication Failures)**:
+
+   - Establish a continuous security monitoring system for identifying and responding quickly to potential threats or security breaches.
+
+8. **Security Testing and Penetration Assessments (A03:2021-Injection)**:
+
+   - Conduct regular security testing and penetration assessments to identify vulnerabilities and weaknesses in your system before attackers can exploit them.
+
+9. **Secure Error Handling (A03:2021-Injection)**:
+
+   - Implement secure error handling so that error messages do not reveal sensitive information or technical details that can be exploited by attackers.
+
